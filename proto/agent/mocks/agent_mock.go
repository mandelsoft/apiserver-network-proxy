/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Automatically generated by MockGen. DO NOT EDIT!
// Source: sigs.k8s.io/apiserver-network-proxy/proto/agent (interfaces: AgentService_ConnectServer)

package mock_agent

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	client "sigs.k8s.io/apiserver-network-proxy/konnectivity-client/proto/client"
)

// Mock of AgentService_ConnectServer interface
type MockAgentService_ConnectServer struct {
	ctrl     *gomock.Controller
	recorder *_MockAgentService_ConnectServerRecorder
}

// Recorder for MockAgentService_ConnectServer (not exported)
type _MockAgentService_ConnectServerRecorder struct {
	mock *MockAgentService_ConnectServer
}

func NewMockAgentService_ConnectServer(ctrl *gomock.Controller) *MockAgentService_ConnectServer {
	mock := &MockAgentService_ConnectServer{ctrl: ctrl}
	mock.recorder = &_MockAgentService_ConnectServerRecorder{mock}
	return mock
}

func (_m *MockAgentService_ConnectServer) EXPECT() *_MockAgentService_ConnectServerRecorder {
	return _m.recorder
}

func (_m *MockAgentService_ConnectServer) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

func (_mr *_MockAgentService_ConnectServerRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Context")
}

func (_m *MockAgentService_ConnectServer) Recv() (*client.Packet, error) {
	ret := _m.ctrl.Call(_m, "Recv")
	ret0, _ := ret[0].(*client.Packet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAgentService_ConnectServerRecorder) Recv() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Recv")
}

func (_m *MockAgentService_ConnectServer) RecvMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "RecvMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAgentService_ConnectServerRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RecvMsg", arg0)
}

func (_m *MockAgentService_ConnectServer) Send(_param0 *client.Packet) error {
	ret := _m.ctrl.Call(_m, "Send", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAgentService_ConnectServerRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0)
}

func (_m *MockAgentService_ConnectServer) SendHeader(_param0 metadata.MD) error {
	ret := _m.ctrl.Call(_m, "SendHeader", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAgentService_ConnectServerRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendHeader", arg0)
}

func (_m *MockAgentService_ConnectServer) SendMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "SendMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAgentService_ConnectServerRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendMsg", arg0)
}

func (_m *MockAgentService_ConnectServer) SetHeader(_param0 metadata.MD) error {
	ret := _m.ctrl.Call(_m, "SetHeader", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAgentService_ConnectServerRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHeader", arg0)
}

func (_m *MockAgentService_ConnectServer) SetTrailer(_param0 metadata.MD) {
	_m.ctrl.Call(_m, "SetTrailer", _param0)
}

func (_mr *_MockAgentService_ConnectServerRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTrailer", arg0)
}
